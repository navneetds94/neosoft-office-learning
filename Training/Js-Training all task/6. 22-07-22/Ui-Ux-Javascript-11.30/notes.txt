-> Javascript :- It is an client-side scripting language.
   -> client-side :- execute by the browser 
   -> scripting language :- interpriting language (line line)
   It is a programming language initially designed to interect with elements of web pages(runtime DOM manupaulation).
    --> Javascript consists of 3 parts 
       1. ECMAScript provides the core functionalities.
       2. DOM provides a interface for interecting with elements.
       3. BOM provides the browser API for interecting with the browser.
     -> How Javascript is work on the browser (execute)
     When a web page is loaded , the Javascript engine in the browser executes a Javascript code.The Javascript code then modifies the HTML and CSS to update the UI dynamically.
     *** Modern Javascript browsers are typically implemented as just-in-time (JIT) compilers that compile Javascript code to bytecode for improved performance.

     --> Histroy of Javascript
      1995 -> Mocha 
      Then its name is changed LiveScript 
      -> Netscape change LiveScript to Javascript (1.0)
         -> Javascript in Netscape Navigator 
         -> JScript in IE.
         -> ECMA-263 , a standard for defining a new scripting lanaguage named (ECMAScript)
         -> Old Javascript is known as ES5 
         -> New Featues ECMA 2015 (Es 6)
    -> How we execute Javascript code 
       -> Javascript is case sensitive lanaguage 
       -> extension is .js 
       -> in <script> tag we write the js code 
    -> How we implememt Javascript 
       Internal way :
        home.html 
        <html>
          <head>
             <script>
                js code 
             </script>
         </head>
        </html> 
       External way :
       first.js 
         Javascript code
         home.html 
        <html>
          <head>
             <script src="first.js">
             </script>
         </head>
        </html> 
        --> Comments :- to describe the code 
          single :- // 
          multiple :- /*  */
          html :- <!-- -->
        --> How we render | print data in browser 
          document.write("--");
        --> Console :- used to diplay data in console , debug a data and all erros are shown in the console.
          console.log("--")
*** Everything in Javascript is an object . all the properies are the part of window object 

--> In every browser their is a Javascript engine which execute the Javascript code and give us output 
  -> Chrome :- V8 
  -> Firefox :- Spider Monkey 
  -> Ie | Safari :- chakra 
  --> Javascript is a programming 
     --> Variables :- are the temporary memory location which hold input data.
        -> var keyword :- 
           var varname=value;
             -> Rules to define variable name 
               -> start with [a-zA-Z] or [_$]
               -> after it combination of [a-zA-Z0-9_]
            eg:
            var empName="anuj";
            var emp_salary=50000; 
            -> var is the oldest keyword to declare a variable.
            -> Scope :- global or function scope.It means that variables defined outside the function can be accessed globally and variable defined inside the function can be accessed witin in a function.
        -> let keyword :- It is an improved version of var keyword.
          Scope :- block scoped . The scope of a let variable is only block scoped.
          eg:
            for(i=1; i<=5;i++){
              console.log(i)
            }
             console.log(i)
        -> const keyword :- const keyword has all the properties that are same as let keyword expect the user cannot update it.(read only value)
         -> Scope (block scoped) When we declare a const variable , thet need to initilize it , otherwise it return an error.

         **** can we we change the const variable values in Javascript 
            ** yes in array elements and object properties 
        -> Hoisting :- It is a inbuild behavior in which a function or variable can be used before declaration.
        eg:
          -> variable hoisting 
             console.log(a);
             var a;
          -> function hoisting 
          if we define a function with expression then it cant move to the top.
      --> Datatype :- type declaration of variable is known as datatype. But in Javascript it allocate at runtime as per the variable value. Javascript is a loosly type language.
       eg:
        let a=20 ;// number 
        a="sumit";// string 
        a=true;// boolean 
          -> Primitive Types 
            Boolean , Null , Undefined , Number , BigInt , string , symbol 
          -> Objects (collections of properties )
          -> Boolean :- true and fasle (logical datatype)
            eg:
              if(boolean condition){
              }
              for(init; boolean condition; inc/dec){}
          -> Null :- It has exactky one value:null
             if(x===null){

             }
             x=null
          -> undefined :- whenever we dont initilize value in a varaible 
             var a; // a is undefined 
          -> number type 
            let age=23;
            let per=89.56;
          -> BigInt :- complex number support 
            let x=BigInt(---------);
          -> NaN :- Not a number (arthematical operator cannot be expressed as a number)
          -> string :- 
            let a="--";
            let b='--';
            let x=`Hello ${var}`
        -> symbol (new introduced in Javascript)
        -> Objects :- are used to store information in the form of properties and method (key | value)
           -> Javascript is all about object
              -> Object Literal 
                let obj={
                  fname:'anuj',
                  lname:'singh',
                fullname:function(){
                 return `${this.fname} ${this.lname}`
                  }
                }
            -> Object Datastructure 
              set() :- set object lets us store unique values of any type.
                are collection of values.
                eg:
              let myset=new Set();
              myset.add(1);
              myset.add(2);
              myset.add('xyz')
              myset.add({a:1,b:1})
          --> Array :- array is an group of element having similar datatype but in Javascript we can store any type of value.
            -> array index are start with 0 
            -> syntex 
              1. Array Constructor 
                eg:
                let arr=new Array(val,val,val);
              2. with square (prefer)
              let arr=[val,val,val,..];
                 0 1 2 
              0  a b c 
              eg:
              let arr=[234,45.67,"anuj",true];
              arr[3]
              -> find the size of an array 
                  array.length 
                eg:
                for(let i=0; i<arr.length; i++){
                  console.log(arr[i])
                }
              -> forEach() :- used only for an array .loop is going on untill they found null.
              eg:
                arr.forEach(function(val){
                  console.log(val)
                })
          -> Array predefined methods 

          -> WeakMap and WeakSet 
          -> WeakMap :- in that keys must be objects.
          eg:
          let weakMap=new WeakMap();
          let obj={};
          weakMap.set(obj,"ok")
          weakMap.set("test","oops");
  -> Operators :-
   operand 
   operator 
     a+b 
     (a,b are operand and + is a operator ) 
    -> Arithmetic operators: (calculation)
    + , - ,* , / , % , ++ , --, ** (calculates the base to the exponent power)
      1/2 ;//0.5
      2 ** 3 = 8 
    -> Assignment operators :- =
       It assigns a value to its left operand based on the value of its right operand.
         x=abc();
         x+=abc()
         -=
         /= 
         *=
         %= 
         **=
         eg:
         let obj={};
         obj.y=10;
         let key="x";
         obj[key]=15;
      -> Comparison Operators 
        == :- return true if the operands are equal (check only value)
           var1=3
           3==var1 
           "3"==var1 
           3=='3'
        != 
        (*) === (strict equal) :- return true if operands and types are equal 
          var a=10;
          var b="10" 
          if(a===b) //false 
          if(a===10) // true 
        !== 
        > 
        < 
        >= 
        <= 
        -> logical operator 
          && :- when all conditions are correct 
            if(a>b && a>c){}
          || :- when anyone condition is correct 
          !  : when incorrect then it true 
            if(!(city=="noida")){

            }
          -> Ternary Conditional Operator 
           (condition ? val1(true) :val2(false))

           const status= age>=18 ? 'Adult' :'Child'
          -> Comma operator :- evaluates noth of its operands and returns the value of the last operand.

          -> COndition (Selection) :- return boolean value 
            -> if else :- used for 1 or 2 conditon 
              if(condition){
                 statement;
              }
              else {
                statement;
              }
              eg:
              if(age>18){
                // Elligible
              }
              else {
                //Not elligible 
              }
            -> if else if else (more then 2)
            if(condition){
              statement;
            }
            else if(condition){
              statement;
            }
            ---
            ---
            else {
              ---
            }
            -> nested if :- if within another if . when all the if conditions are correct then it return true otherwise every if have their else part.
              eg:
                if(conditon){
                    if(condition){
                         if(condition){
                            //true 
                         }
                         else {

                         }
                    }
                    else {

                    }
                }
                else {

                }
            -> Switch Case :- multi decision making. performance is fast then if else.
               eg:
               switch(exp){
                 case val : statement;
                    break;
                 ---
                 ---
                 default : statement
               }

               --> Type Conversion 
                  -> String Conversion 
                    let value=true;
                    console.log(typeof value);//boolean 
                    value=String(value);
                    console.log(typeof value);//string 
                  -> Numeric Conversion  
                  let value="123";
                    console.log(typeof value);//String 
                    value=Number(value);
                    console.log(typeof value);//number 
                    eg:
                    let age=Number("sa");
                    alert(age);//NaN 
                    -> Numeric converison rules 
                      undefined : NaN 
                      null : 0 
                      true and false : 1 and 0
                  -> Boolean Conversion 
                    console.log(Boolean(1));//true 
                     console.log(Boolean(0));//false 
                  -> parseInt()

                  --> 
                   var currentDate=Date.now(); 
                   var numDate=new Date(currentDate);
    --> Looping (Iteration) :- It is a process for executing multiline statements in a single line or repetation of statements.
       -> for loop :-  the condition is check at the start of the loop , if condition is correct then loop is executed otherwise terminated.
       eg:
          for(let i=1 ; i<=5 ;i++){
              console.log("Sumit");
          }
        -> while loop :- same as for but return boolean , depend on the condition.
          while(condition){
            statement;
          }
        -> do-while :- in this loop the condition is check at the end of the loop so this loop execute atleast once while a condition is correct or not .
        
        eg:
          do {
            statement;
          }while(condition);

          let i=1;
          do {
            console.log("Sumit")
            i++;
          }while(i>=10);
          Sumit 
 -> forEach() :- used only for an array. loop is going on untill it found null.
     let arr=[23,45,67,89,89];
     arr.forEach(function(val,ind){
        console.log(`${val} is in index ${ind}`)
     })
-> for of loop :- It allows us to iterate over iterable objects (arrays ,sets , maps ,string etc)
   syntex 
     for(let element of iterable){

     }
-> for in loop :- It allows us to iterate over all property keys of an object. 
   synetx: 
      for(key in object){
        
      }















